// src/app/challenges/[category]/page.js
'use client';

import { useState, useEffect } from 'react';
import { useParams } from 'next/navigation';
import Link from 'next/link';

export default function AdminCategoryItemsPage() {
  const { category } = useParams();
  const [newChallengeItem, setNewChallengeItem] = useState({
    title: '',
    description: '',
    timeLimit: 0,
    order: 1, // Default order
  });
  const [items, setItems] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [addStatus, setAddStatus] = useState('');

  const fetchChallengeItems = async () => {
    setLoading(true);
    setError(null);
    try {
      const response = await fetch(`/api/challenges/${category}/items`);
      if (!response.ok) {
        if (response.status === 404) {
            setItems([]); // No items found is not an error here, just empty list
            return;
        }
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      const data = await response.json();
      setItems(data);
    } catch (err) {
      console.error(`Failed to fetch items for category ${category}:`, err);
      setError("Failed to load existing challenge items.");
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    if (category) {
      fetchChallengeItems();
    }
  }, [category]);

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setNewChallengeItem(prevState => ({
      ...prevState,
      [name]: name === 'timeLimit' || name === 'order' ? parseInt(value, 10) : value
    }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setAddStatus('');
    try {
      const payload = {
        title: newChallengeItem.title,
        description: newChallengeItem.description,
        timeLimit: newChallengeItem.timeLimit,
        // 'order' is auto-generated by the API, so we don't send it here from input
      };

      const response = await fetch(`/api/challenges/${category}/items`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(payload),
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.message || `HTTP error! status: ${response.status}`);
      }

      setAddStatus('Challenge item added successfully!');
      setNewChallengeItem({ title: '', description: '', timeLimit: 0, order: 1 }); // Clear form
      fetchChallengeItems(); // Refresh the list
    } catch (err) {
      console.error("Error adding challenge item:", err);
      setAddStatus(`Error adding challenge item: ${err.message}`);
    }
  };

  if (loading) {
    return <div className="p-4 text-center">Loading...</div>;
  }

  return (
    <div className="container mx-auto p-4">
      <h1 className="text-3xl font-bold mb-6 capitalize">Admin: Manage {category.replace(/-/g, ' ')} Challenge Items</h1>

      {/* Add New Challenge Item Form */}
      <div className="bg-white p-6 rounded-lg shadow-md mb-8">
        <h2 className="text-2xl font-semibold mb-4">Add New Challenge Item</h2>
        <form onSubmit={handleSubmit} className="space-y-4">
          <div>
            <label htmlFor="title" className="block text-sm font-medium text-gray-700">Item Title (e.g., "Head and Face Anatomy")</label>
            <input
              type="text"
              id="title"
              name="title"
              value={newChallengeItem.title}
              onChange={handleInputChange}
              className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm p-2"
              required
            />
          </div>
          <div>
            <label htmlFor="description" className="block text-sm font-medium text-gray-700">Description</label>
            <textarea
              id="description"
              name="description"
              value={newChallengeItem.description}
              onChange={handleInputChange}
              rows="3"
              className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm p-2"
              required
            ></textarea>
          </div>
          <div>
            <label htmlFor="timeLimit" className="block text-sm font-medium text-gray-700">Default Time Limit (minutes)</label>
            <input
              type="number"
              id="timeLimit"
              name="timeLimit"
              value={newChallengeItem.timeLimit}
              onChange={handleInputChange}
              min="0"
              className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm p-2"
              required
            />
          </div>
          <button
            type="submit"
            className="bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded-md transition-colors"
          >
            Add Challenge Item
          </button>
          {addStatus && <p className="mt-2 text-sm text-center">{addStatus}</p>}
        </form>
      </div>

      {/* Existing Challenge Items List */}
      <div className="bg-white p-6 rounded-lg shadow-md">
        <h2 className="text-2xl font-semibold mb-4">Existing Items in {category.replace(/-/g, ' ')}</h2>
        {error && <p className="text-red-500 mb-4">{error}</p>}
        {items.length === 0 ? (
          <p className="text-gray-500">No items added yet for this category.</p>
        ) : (
          <ul className="space-y-3">
            {items.map((item) => (
              <li key={item.id} className="border border-gray-200 rounded-md p-3 flex justify-between items-center">
                <div>
                  <h3 className="text-lg font-medium">{item.title} (Order: {item.order})</h3>
                  <p className="text-sm text-gray-600">{item.description}</p>
                  <p className="text-xs text-gray-500">Time Limit: {item.timeLimit} mins</p>
                </div>
                <Link href={`/challenges/${category}/${item.id}`} className="text-blue-600 hover:underline">
                  Manage Difficulty &rarr;
                </Link>
              </li>
            ))}
          </ul>
        )}
      </div>
    </div>
  );
}